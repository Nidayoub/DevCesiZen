import { User, UserModel } from "../models/User";
import { SessionModel } from "../models/sessionModel";
import bcrypt from "bcryptjs";
import { serialize } from "cookie";
import crypto from "crypto";
import { sendEmail } from "../utils/email";

/**
 * Contr√¥leur pour la gestion des utilisateurs
 */
export class UserController {
  private sessionModel: SessionModel;

  constructor() {
    this.sessionModel = new SessionModel();
  }

  /**
   * Inscription d'un utilisateur
   */
  async register(req: Request): Promise<Response> {
    try {
      console.log("üìù Tentative d'inscription d'un nouvel utilisateur");
      
      const body = await req.json();
      console.log("üìù Donn√©es re√ßues:", JSON.stringify(body));
      
      const { email, password, firstname, lastname } = body;

      // Validation des donn√©es
      if (!email || !password || !firstname || !lastname) {
        console.log("‚ùå Inscription √©chou√©e: Donn√©es incompl√®tes", { email, firstname, lastname });
        return new Response(
          JSON.stringify({
            error: "Tous les champs sont obligatoires",
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // V√©rifier si l'utilisateur existe d√©j√†
      console.log("üîç V√©rification si l'email existe d√©j√†:", email);
      const existingUser = await UserModel.findByEmail(email);
      if (existingUser) {
        console.log("‚ùå Inscription √©chou√©e: Email d√©j√† utilis√©:", email);
        return new Response(
          JSON.stringify({
            error: "Cet email est d√©j√† utilis√©",
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // Cr√©er l'utilisateur
      console.log("üë§ Cr√©ation de l'utilisateur:", email);
      const user = await UserModel.create({
        email,
        password,
        firstname,
        lastname,
        role: "user"
      });
      console.log("‚úÖ Utilisateur cr√©√© avec succ√®s, ID:", user.id);

      // Cr√©er une session
      console.log("üîë Cr√©ation d'une session pour l'utilisateur:", user.id);
      const sessionToken = crypto.randomBytes(32).toString("hex");
      const expiration = new Date();
      expiration.setDate(expiration.getDate() + 7); // Session de 7 jours

      await this.sessionModel.create({
        userId: user.id!,
        token: sessionToken,
        expiration,
      });
      console.log("‚úÖ Session cr√©√©e avec succ√®s");

      // Cr√©er un cookie de session
      const cookie = serialize("sessionToken", sessionToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict",
        maxAge: 7 * 24 * 60 * 60, // 7 jours en secondes
        path: "/",
      });
      console.log("üç™ Cookie de session cr√©√©");

      // Retourner les donn√©es sans le mot de passe
      const { password: _, ...userWithoutPassword } = user;
      console.log("üöÄ Inscription r√©ussie pour:", email);

      return new Response(JSON.stringify(userWithoutPassword), {
        status: 201,
        headers: {
          "Content-Type": "application/json",
          "Set-Cookie": cookie,
        },
      });
    } catch (error) {
      console.error("‚ùå ERREUR CRITIQUE lors de l'inscription:", error);
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
        console.error("Stack trace:", error.stack);
      }
      return new Response(
        JSON.stringify({
          error: "Erreur lors de l'inscription",
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        }
      );
    }
  }

  /**
   * Connexion d'un utilisateur
   */
  async login(req: Request): Promise<Response> {
    try {
      console.log("üîë Tentative de connexion");
      
      const body = await req.json();
      console.log("üîë Donn√©es de connexion re√ßues pour:", body.email);
      
      const { email, password } = body;

      // Validation des donn√©es
      if (!email || !password) {
        console.log("‚ùå Connexion √©chou√©e: Donn√©es incompl√®tes");
        return new Response(
          JSON.stringify({
            error: "Email et mot de passe requis",
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // V√©rifier les identifiants
      console.log("üîç Recherche de l'utilisateur:", email);
      const user = await UserModel.findByEmail(email);
      if (!user) {
        console.log("‚ùå Connexion √©chou√©e: Utilisateur non trouv√©:", email);
        return new Response(
          JSON.stringify({
            error: "Identifiants invalides",
          }),
          {
            status: 401,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // V√©rifier le mot de passe
      console.log("üîê V√©rification du mot de passe pour:", email);
      const isValidPassword = await bcrypt.compare(password, user.password);
      if (!isValidPassword) {
        console.log("‚ùå Connexion √©chou√©e: Mot de passe incorrect pour:", email);
        return new Response(
          JSON.stringify({
            error: "Identifiants invalides",
          }),
          {
            status: 401,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // Cr√©er une session
      const sessionToken = crypto.randomBytes(32).toString("hex");
      const expiration = new Date();
      expiration.setDate(expiration.getDate() + 7); // Session de 7 jours

      await this.sessionModel.create({
        userId: user.id!,
        token: sessionToken,
        expiration,
      });

      // Cr√©er un cookie de session
      const cookie = serialize("sessionToken", sessionToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict",
        maxAge: 7 * 24 * 60 * 60, // 7 jours en secondes
        path: "/",
      });

      // Retourner les donn√©es sans le mot de passe
      const { password: _, ...userWithoutPassword } = user;

      return new Response(JSON.stringify(userWithoutPassword), {
        status: 200,
        headers: {
          "Content-Type": "application/json",
          "Set-Cookie": cookie,
        },
      });
    } catch (error) {
      console.error("‚ùå ERREUR CRITIQUE lors de la connexion:", error);
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
        console.error("Stack trace:", error.stack);
      }
      return new Response(
        JSON.stringify({
          error: "Erreur lors de la connexion",
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        }
      );
    }
  }

  /**
   * D√©connexion de l'utilisateur
   */
  async logout(req: Request): Promise<Response> {
    try {
      console.log("üö™ Tentative de d√©connexion");
      
      // R√©cup√©rer le token depuis les cookies
      const cookies = req.headers.get("Cookie") || "";
      console.log("üç™ Cookies re√ßus:", cookies);
      
      // Parse les cookies correctement
      const parsedCookies = Object.fromEntries(
        cookies.split(';')
          .map(cookie => cookie.trim().split('='))
          .filter(parts => parts.length === 2)
          .map(([key, value]) => [key, decodeURIComponent(value)])
      );
      
      const sessionToken = parsedCookies.sessionToken;
      console.log("üîë Session token trouv√©:", sessionToken ? "Oui" : "Non");

      if (sessionToken) {
        // Supprimer la session de la base de donn√©es
        console.log("üóëÔ∏è Suppression de la session");
        await this.sessionModel.deleteByToken(sessionToken);
        console.log("‚úÖ Session supprim√©e avec succ√®s");
      }

      // Supprimer le cookie
      const cookie = serialize("sessionToken", "", {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict",
        maxAge: 0, // Expiration imm√©diate
        path: "/",
      });
      console.log("üç™ Cookie de session invalid√©");

      return new Response(
        JSON.stringify({
          message: "D√©connexion r√©ussie",
        }),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            "Set-Cookie": cookie,
          },
        }
      );
    } catch (error) {
      console.error("‚ùå ERREUR CRITIQUE lors de la d√©connexion:", error);
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
        console.error("Stack trace:", error.stack);
      }
      return new Response(
        JSON.stringify({
          error: "Erreur lors de la d√©connexion",
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        }
      );
    }
  }

  /**
   * R√©cup√©rer le profil de l'utilisateur connect√©
   */
  async getProfile(req: Request): Promise<Response> {
    try {
      const userId = (req as any).userId;
      const user = await UserModel.findById(userId);

      if (!user) {
        return new Response(
          JSON.stringify({
            error: "Utilisateur non trouv√©",
          }),
          {
            status: 404,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // Retourner les donn√©es sans le mot de passe
      const { password, ...userWithoutPassword } = user;

      return new Response(JSON.stringify(userWithoutPassword), {
        status: 200,
        headers: { "Content-Type": "application/json" },
      });
    } catch (error) {
      console.error("Erreur de r√©cup√©ration profil:", error);
      return new Response(
        JSON.stringify({
          error: "Erreur lors de la r√©cup√©ration du profil",
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        }
      );
    }
  }

  /**
   * Suppression d'un utilisateur (admin uniquement)
   */
  async deleteUser(req: Request, id: number): Promise<Response> {
    try {
      // V√©rifier si l'utilisateur existe
      const user = await UserModel.findById(id);
      if (!user) {
        return new Response(
          JSON.stringify({
            error: "Utilisateur non trouv√©",
          }),
          {
            status: 404,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // Supprimer l'utilisateur
      await UserModel.delete(id);

      return new Response(
        JSON.stringify({
          message: "Utilisateur supprim√© avec succ√®s",
        }),
        {
          status: 200,
          headers: { "Content-Type": "application/json" },
        }
      );
    } catch (error) {
      console.error("Erreur de suppression utilisateur:", error);
      return new Response(
        JSON.stringify({
          error: "Erreur lors de la suppression de l'utilisateur",
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        }
      );
    }
  }

  /**
   * R√©cup√©ration de mot de passe
   */
  async forgotPassword(req: Request): Promise<Response> {
    try {
      console.log("üîë Tentative de r√©cup√©ration de mot de passe");
      
      const body = await req.json();
      const { email } = body;

      if (!email) {
        console.log("‚ùå Email manquant pour la r√©cup√©ration de mot de passe");
        return new Response(
          JSON.stringify({
            error: "Email requis",
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      const user = await UserModel.findByEmail(email);
      if (!user) {
        // Pour des raisons de s√©curit√©, ne pas indiquer si l'email existe ou non
        console.log("‚ÑπÔ∏è Email non trouv√© dans la base de donn√©es:", email);
        return new Response(
          JSON.stringify({
            message:
              "Si votre adresse email est correcte, vous recevrez un lien de r√©initialisation",
          }),
          {
            status: 200,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // G√©n√©rer un token simple bas√© sur l'email et un secret
      // Ce token ne sera pas stock√© en base de donn√©es, mais sera valid√© lors de la r√©initialisation
      const secret = process.env.JWT_SECRET || 'default_secret';
      const timestamp = Date.now();
      const dataToEncrypt = `${user.id}-${user.email}-${timestamp}`;
      const resetToken = crypto
        .createHmac('sha256', secret)
        .update(dataToEncrypt)
        .digest('hex');
      
      console.log("üîë Token de r√©initialisation g√©n√©r√© pour:", email);
      
      // Cr√©er le lien avec des donn√©es validables (userid, timestamp, token)
      const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';
      // Le token expire dans 1 heure
      const expiry = timestamp + 3600000; // 1 heure en millisecondes
      const resetLink = `${frontendUrl}/reset-password?id=${user.id}&timestamp=${timestamp}&expiry=${expiry}&token=${resetToken}`;
      
      // Envoyer l'email de r√©initialisation
      const html = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #4F46E5;">R√©initialisation de votre mot de passe</h2>
          <p>Bonjour ${user.firstname},</p>
          <p>Vous avez demand√© la r√©initialisation de votre mot de passe. Veuillez cliquer sur le bouton ci-dessous pour d√©finir un nouveau mot de passe :</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetLink}" style="background-color: #4F46E5; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; font-weight: bold;">
              R√©initialiser mon mot de passe
            </a>
          </div>
          <p>Ce lien expirera dans 1 heure. Si vous n'avez pas demand√© cette r√©initialisation, vous pouvez ignorer cet email.</p>
          <p>Cordialement,<br>L'√©quipe CesiZen</p>
        </div>
      `;
      
      await sendEmail({
        to: email,
        subject: 'R√©initialisation de votre mot de passe - CesiZen',
        html
      });
      
      console.log("üìß Email de r√©initialisation envoy√© √†:", email);
      
      return new Response(
        JSON.stringify({
          message: "Si votre adresse email est correcte, vous recevrez un lien de r√©initialisation",
        }),
        {
          status: 200,
          headers: { "Content-Type": "application/json" },
        }
      );
    } catch (error) {
      console.error("‚ùå ERREUR CRITIQUE lors de la r√©cup√©ration de mot de passe:", error);
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
        console.error("Stack trace:", error.stack);
      }
      return new Response(
        JSON.stringify({
          error: "Erreur lors de la demande de r√©cup√©ration",
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        }
      );
    }
  }

  /**
   * R√©initialisation de mot de passe avec un token
   */
  async resetPassword(req: Request): Promise<Response> {
    try {
      console.log("üîÑ Tentative de r√©initialisation de mot de passe");
      
      const body = await req.json();
      const { id, timestamp, expiry, token, password } = body;

      if (!id || !timestamp || !expiry || !token || !password) {
        console.log("‚ùå Param√®tres manquants pour la r√©initialisation");
        return new Response(
          JSON.stringify({
            error: "Tous les param√®tres sont requis",
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // V√©rifier que le token n'est pas expir√©
      const now = Date.now();
      if (now > parseInt(expiry)) {
        console.log("‚ùå Token expir√©");
        return new Response(
          JSON.stringify({
            error: "Le lien de r√©initialisation a expir√©",
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // R√©cup√©rer l'utilisateur
      const user = await UserModel.findById(parseInt(id));
      if (!user) {
        console.log("‚ùå Utilisateur non trouv√©");
        return new Response(
          JSON.stringify({
            error: "Utilisateur non trouv√©",
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // Recr√©er le token pour v√©rification
      const secret = process.env.JWT_SECRET || 'default_secret';
      const dataToEncrypt = `${id}-${user.email}-${timestamp}`;
      const expectedToken = crypto
        .createHmac('sha256', secret)
        .update(dataToEncrypt)
        .digest('hex');
      
      // V√©rifier que le token est valide
      if (token !== expectedToken) {
        console.log("‚ùå Token invalide");
        return new Response(
          JSON.stringify({
            error: "Lien de r√©initialisation invalide",
          }),
          {
            status: 400,
            headers: { "Content-Type": "application/json" },
          }
        );
      }

      // Mettre √† jour le mot de passe
      console.log("üîÑ Mise √† jour du mot de passe pour l'utilisateur:", user.id);
      await UserModel.update(user.id!, {
        password,
      });
      console.log("‚úÖ Mot de passe r√©initialis√© avec succ√®s pour:", user.email);

      return new Response(
        JSON.stringify({
          message: "Mot de passe r√©initialis√© avec succ√®s",
        }),
        {
          status: 200,
          headers: { "Content-Type": "application/json" },
        }
      );
    } catch (error) {
      console.error("‚ùå ERREUR CRITIQUE lors de la r√©initialisation de mot de passe:", error);
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
        console.error("Stack trace:", error.stack);
      }
      return new Response(
        JSON.stringify({
          error: "Erreur lors de la r√©initialisation du mot de passe",
        }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        }
      );
    }
  }
} 