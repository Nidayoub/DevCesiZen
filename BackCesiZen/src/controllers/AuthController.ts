import { UserModel } from '../models/User';
import { generateToken, verifyToken } from '../utils/jwt';
import bcrypt from 'bcryptjs';
import { serialize } from 'cookie';
import { generateVerificationToken, sendVerificationEmail } from '../utils/email';

export class AuthController {
  static async register(req: Request) {
    try {
      console.log("üîê AuthController.register - D√©but de l'inscription");
      const body = await req.json();
      console.log("üìù Donn√©es re√ßues:", JSON.stringify({...body, password: '***MASKED***'}));
      const { email, password, firstname, lastname } = body;

      // V√©rifier si l'utilisateur existe d√©j√†
      console.log("üîç V√©rification si l'utilisateur existe d√©j√†:", email);
      const existingUser = await UserModel.findByEmail(email);
      if (existingUser) {
        console.log("‚ùå Inscription impossible: Email d√©j√† utilis√©:", email);
        return new Response(JSON.stringify({ error: 'Email d√©j√† utilis√©' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      // G√©n√©rer un token de v√©rification
      console.log("üîë G√©n√©ration du token de v√©rification d'email");
      const verification = generateVerificationToken();

      // Tenter d'envoyer l'email de v√©rification AVANT de cr√©er l'utilisateur
      try {
        console.log("üìß Envoi de l'email de v√©rification √†:", email);
        await sendVerificationEmail(email, verification.token, firstname);
        console.log("üìß Email de v√©rification envoy√© avec succ√®s");
      } catch (emailError) {
        console.error("‚ùå Erreur lors de l'envoi de l'email de v√©rification:", emailError);
        // Retourner une erreur au lieu de continuer
        return new Response(
          JSON.stringify({ 
            error: 'Impossible d\'envoyer l\'email de v√©rification. Veuillez r√©essayer plus tard.' 
          }),
          {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      // Cr√©er le nouvel utilisateur seulement si l'email a √©t√© envoy√© avec succ√®s
      console.log("üë§ Cr√©ation du nouvel utilisateur:", email);
      const user = await UserModel.create({
        email,
        password,
        firstname,
        lastname,
        role: 'user',
        is_verified: false,
        verification_token: verification.token,
        verification_expires: verification.expires.toISOString()
      });
      console.log("‚úÖ Utilisateur cr√©√© avec succ√®s, ID:", user.id);

      // Ne pas g√©n√©rer de token JWT pour la connexion automatique
      // L'utilisateur devra v√©rifier son email avant de pouvoir se connecter

      return new Response(
        JSON.stringify({
          success: true,
          message: "Inscription r√©ussie! Veuillez v√©rifier votre adresse e-mail pour activer votre compte. Vous ne pourrez pas vous connecter tant que vous n'aurez pas cliqu√© sur le lien envoy√© par email."
        }),
        {
          status: 201,
          headers: {
            "Content-Type": "application/json"
          },
        }
      );
    } catch (error) {
      console.error("‚ùå Erreur lors de l'inscription:", error);
      return new Response(
        JSON.stringify({ error: "Erreur lors de l'inscription" }),
        {
          status: 500,
          headers: { "Content-Type": "application/json" },
        }
      );
    }
  }

  // Ajouter cette m√©thode pour la v√©rification de l'email
  static async verifyEmail(req: Request) {
    try {
      console.log("üîê AuthController.verifyEmail - V√©rification du token");
      const url = new URL(req.url);
      const token = url.searchParams.get('token');

      if (!token) {
        console.log("‚ùå Pas de token fourni");
        return new Response(JSON.stringify({ error: 'Token non valide' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      // Trouver l'utilisateur avec ce token
      console.log("üîç Recherche de l'utilisateur avec le token:", token);
      const user = await UserModel.findByVerificationToken(token);
      
      if (!user) {
        console.log("‚ùå Aucun utilisateur trouv√© avec ce token");
        return new Response(JSON.stringify({ error: 'Token non valide ou expir√©' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      // V√©rifier si le token a expir√©
      const tokenExpiry = new Date(user.verification_expires!);
      if (tokenExpiry < new Date()) {
        console.log("‚ùå Token expir√©");
        return new Response(JSON.stringify({ error: 'Token expir√©. Veuillez demander un nouveau lien de v√©rification.' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      // Marquer l'utilisateur comme v√©rifi√©
      console.log("‚úÖ Validation du compte utilisateur:", user.email);
      await UserModel.update(user.id!, {
        is_verified: true,
        verification_token: '',
        verification_expires: ''
      });

      return new Response(JSON.stringify({ 
        success: true,
        message: 'Email v√©rifi√© avec succ√®s. Vous pouvez maintenant vous connecter.' 
      }), {
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      });
    } catch (error) {
      console.error("‚ùå Erreur lors de la v√©rification de l'email:", error);
      return new Response(JSON.stringify({ error: 'Erreur lors de la v√©rification de l\'email' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  static async login(req: Request) {
    try {
      console.log("üîê AuthController.login - Tentative de connexion");
      const body = await req.json();
      console.log("üìù Donn√©es re√ßues:", body.email);
      const { email, password } = body;

      // Trouver l'utilisateur
      console.log("üîç Recherche de l'utilisateur:", email);
      const user = await UserModel.findByEmail(email);
      if (!user) {
        console.log("‚ùå Connexion √©chou√©e: Utilisateur non trouv√©:", email);
        return new Response(
          JSON.stringify({ error: 'Email ou mot de passe incorrect' }),
          {
            status: 401,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      // V√©rifier le mot de passe
      console.log("üîí V√©rification du mot de passe pour:", email);
      const passwordMatch = await bcrypt.compare(password, user.password);
      if (!passwordMatch) {
        console.log("‚ùå Connexion √©chou√©e: Mot de passe incorrect pour:", email);
        return new Response(
          JSON.stringify({ error: 'Email ou mot de passe incorrect' }),
          {
            status: 401,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      // V√©rifier si l'adresse email est v√©rifi√©e
      if (!user.is_verified) {
        console.log("‚ùå Connexion √©chou√©e: Email non v√©rifi√© pour:", email);
        return new Response(
          JSON.stringify({ 
            error: 'Veuillez v√©rifier votre adresse email avant de vous connecter. V√©rifiez votre bo√Æte de r√©ception pour le lien de v√©rification.'
          }),
          {
            status: 403,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      // G√©n√©rer le token
      console.log("üîë G√©n√©ration du token JWT pour:", email);
      const token = await generateToken({
        userId: user.id!,
        email: user.email,
        role: user.role
      });
      console.log("‚úÖ Token g√©n√©r√© avec succ√®s");

      // Cr√©er un cookie HTTP-only avec le token
      const cookieOptions = {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict" as const,
        maxAge: 7 * 24 * 60 * 60, // 7 jours en secondes
        path: "/"
      };
      
      const authCookie = serialize("authToken", token, cookieOptions);
      console.log("üç™ Cookie HTTP-only cr√©√© avec le token JWT");

      console.log("‚úÖ Connexion r√©ussie pour:", email);
      
      // Retourner les donn√©es utilisateur sans mot de passe, mais avec le token en cookie
      const { password: _, ...userWithoutPassword } = user;
      return new Response(
        JSON.stringify({ user: userWithoutPassword }),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
            'Set-Cookie': authCookie
          }
        }
      );
    } catch (error) {
      console.error("‚ùå ERREUR CRITIQUE lors de la connexion:", error);
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
        console.error("Stack trace:", error.stack);
      }
      return new Response(
        JSON.stringify({ error: 'Erreur lors de la connexion' }),
        {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
  }

  static async getCurrentUser(req: Request) {
    try {
      console.log("üë§ AuthController.getCurrentUser - R√©cup√©ration du profil");
      
      // R√©cup√©rer le token depuis les cookies
      const cookies = req.headers.get('Cookie') || '';
      const cookieMap = Object.fromEntries(
        cookies.split(';')
          .map(cookie => cookie.trim().split('='))
          .filter(parts => parts.length === 2)
          .map(([key, value]) => [key, decodeURIComponent(value)])
      );
      
      const token = cookieMap.authToken;
      console.log("üîë Token dans les cookies:", token ? "Trouv√©" : "Non trouv√©");
      
      if (!token) {
        console.log("‚ùå Token non fourni dans les cookies");
        return new Response(JSON.stringify({ error: 'Token non fourni' }), {
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      // V√©rifier le token
      try {
        console.log("üîç V√©rification du token JWT");
        const payload = await verifyToken(token);
        const userId = payload.userId;
        console.log("‚úÖ Token v√©rifi√© avec succ√®s, userId:", userId);

        // R√©cup√©rer l'utilisateur
        console.log("üîç R√©cup√©ration des informations utilisateur, ID:", userId);
        const user = await UserModel.findById(userId);
        if (!user) {
          console.log("‚ùå Utilisateur non trouv√© pour l'ID:", userId);
          return new Response(JSON.stringify({ error: 'Utilisateur non trouv√©' }), {
            status: 404,
            headers: { 'Content-Type': 'application/json' }
          });
        }
        console.log("‚úÖ Utilisateur trouv√©:", user.email);

        // V√©rifier si l'utilisateur a confirm√© son compte
        if (!user.is_verified) {
          console.log("‚ùå Acc√®s refus√©: Email non v√©rifi√© pour:", user.email);
          return new Response(JSON.stringify({ 
            error: 'Veuillez v√©rifier votre adresse email pour acc√©der √† votre compte.'
          }), {
            status: 403,
            headers: { 'Content-Type': 'application/json' }
          });
        }

        // Retourner les infos utilisateur (sans le mot de passe)
        const { password, ...userWithoutPassword } = user;
        console.log("üöÄ Retour du profil utilisateur pour:", user.email);
        
        return new Response(JSON.stringify(userWithoutPassword), {
          status: 200,
          headers: { 'Content-Type': 'application/json' }
        });
      } catch (error) {
        console.error("‚ùå Erreur de v√©rification du token:", error);
        if (error instanceof Error) {
          console.error("Message d'erreur:", error.message);
        }
        return new Response(JSON.stringify({ error: 'Token invalide' }), {
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        });
      }
    } catch (error) {
      console.error("‚ùå ERREUR CRITIQUE lors de la r√©cup√©ration du profil:", error);
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
        console.error("Stack trace:", error.stack);
      }
      return new Response(JSON.stringify({ error: 'Erreur lors de la r√©cup√©ration de l\'utilisateur' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  static async logout(req: Request) {
    try {
      console.log("üö™ AuthController.logout - D√©connexion");
      
      // Cr√©er un cookie expir√© pour supprimer le token
      const cookieOptions = {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        sameSite: "strict" as const,
        maxAge: 0, // Expire imm√©diatement
        path: "/"
      };
      
      const authCookie = serialize("authToken", "", cookieOptions);
      console.log("üç™ Cookie de d√©connexion cr√©√©");
      
      return new Response(JSON.stringify({ 
        message: "D√©connexion r√©ussie" 
      }), {
        status: 200,
        headers: { 
          'Content-Type': 'application/json',
          'Set-Cookie': authCookie
        }
      });
    } catch (error) {
      console.error("‚ùå ERREUR CRITIQUE lors de la d√©connexion:", error);
      if (error instanceof Error) {
        console.error("Message d'erreur:", error.message);
        console.error("Stack trace:", error.stack);
      }
      return new Response(JSON.stringify({ error: 'Erreur lors de la d√©connexion' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  static async resendVerificationEmail(req: Request) {
    try {
      console.log("üìß AuthController.resendVerificationEmail - Demande de renvoi d'email");
      const body = await req.json();
      console.log("üìù Donn√©es re√ßues:", body.email);
      const { email } = body;

      if (!email) {
        console.log("‚ùå Renvoi impossible: Email manquant");
        return new Response(
          JSON.stringify({ error: 'Email requis' }),
          {
            status: 400,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      // Trouver l'utilisateur
      console.log("üîç Recherche de l'utilisateur:", email);
      const user = await UserModel.findByEmail(email);
      if (!user) {
        // Ne pas indiquer si l'utilisateur existe ou non pour des raisons de s√©curit√©
        console.log("‚ùå Renvoi impossible: Utilisateur non trouv√©:", email);
        return new Response(
          JSON.stringify({ message: 'Si votre compte existe, un email de v√©rification vous a √©t√© envoy√©.' }),
          {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      // V√©rifier si l'utilisateur est d√©j√† v√©rifi√©
      if (user.is_verified === true) {
        console.log("‚ùå Renvoi impossible: Utilisateur d√©j√† v√©rifi√©:", email);
        return new Response(
          JSON.stringify({ message: 'Votre compte est d√©j√† v√©rifi√©. Vous pouvez vous connecter.' }),
          {
            status: 200,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      // G√©n√©rer un nouveau token de v√©rification
      console.log("üîë G√©n√©ration d'un nouveau token de v√©rification pour:", email);
      const verification = generateVerificationToken();

      // Mettre √† jour l'utilisateur avec le nouveau token
      await UserModel.update(user.id!, {
        verification_token: verification.token,
        verification_expires: verification.expires.toISOString()
      });

      // Envoyer l'email de v√©rification
      try {
        console.log("üìß Envoi de l'email de v√©rification √†:", email);
        await sendVerificationEmail(email, verification.token, user.firstname);
        console.log("üìß Email de v√©rification envoy√© avec succ√®s");
      } catch (emailError) {
        console.error("‚ùå Erreur lors de l'envoi de l'email de v√©rification:", emailError);
        return new Response(
          JSON.stringify({ error: 'Erreur lors de l\'envoi de l\'email de v√©rification' }),
          {
            status: 500,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }

      return new Response(
        JSON.stringify({ message: 'Un nouvel email de v√©rification a √©t√© envoy√©. Veuillez v√©rifier votre bo√Æte de r√©ception.' }),
        {
          status: 200,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    } catch (error) {
      console.error("‚ùå Erreur lors du renvoi de l'email de v√©rification:", error);
      return new Response(
        JSON.stringify({ error: 'Erreur lors du renvoi de l\'email de v√©rification' }),
        {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }
  }
} 